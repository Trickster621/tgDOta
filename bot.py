import logging
import requests
from io import BytesIO
from bs4 import BeautifulSoup
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import os

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")

# –§–∞–π–ª –ª–æ–≥–æ–≤
USER_LOG_FILE = "/app/user_messages.txt"
if not os.path.exists(USER_LOG_FILE):
    open(USER_LOG_FILE, "w", encoding="utf-8").close()

OWNER_ID = 741409144  # Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–∞

def log_user_message(user, text):
    with open(USER_LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"{user.id} | {user.username} | {text}\n")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_user_message(user, "/start")

    keyboard = [["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è"]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(k, callback_data=k)] for k in keyboard[0]])
    )

async def updates_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    user = update.message.from_user
    log_user_message(user, "/updates")

    try:
        url = "https://dota1x6.com/updates"
        response = requests.get(url)
        soup = BeautifulSoup(response.text, "html.parser")

        # –ò—â–µ–º –±–ª–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        latest_block = soup.select_one(".updates__item")
        if not latest_block:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
            return

        # –¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        text_lines = []
        for li in latest_block.select("li"):
            line_text = li.get_text(strip=True)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è —Å–º–∞–π–ª–∏–∫–æ–≤
            imgs = li.find_all("img")
            for img in imgs:
                src = img.get("src", "")
                if "aghanims_shard.png" in src:
                    line_text = "üîπ " + line_text
                elif "innate.png" in src:
                    line_text = "üî• " + line_text
                elif "ultimate_scepter.png" in src:
                    line_text = "üîÆ " + line_text

            text_lines.append(line_text)

        full_text = "\n".join(text_lines)
        if not full_text:
            full_text = latest_block.get_text(strip=True)

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–ª–æ–∫–∞
        images = []
        for img in latest_block.find_all("img"):
            img_url = img.get("src")
            try:
                img_resp = requests.get(img_url)
                bio = BytesIO()
                bio.write(img_resp.content)
                bio.seek(0)
                images.append(InputMediaPhoto(bio))
            except:
                continue

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if images:
            await update.message.reply_media_group(images)
        await update.message.reply_text(full_text)

        # –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        inline_keyboard = [
            [InlineKeyboardButton("–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", web_app=WebAppInfo(url=url))]
        ]
        await update.message.reply_text("–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard))

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ—Å—Ç–æ–π —ç—Ö–æ –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    user = update.message.from_user
    log_user_message(user, update.message.text)
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("updates", updates_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
