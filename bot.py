# bot.py ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è API
import logging
import os
import re
from io import BytesIO
from urllib.parse import urljoin
from datetime import datetime

import requests
import cloudscraper
from bs4 import BeautifulSoup
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
TOKEN = os.environ.get("BOT_TOKEN") or "–í–ê–®_–¢–û–ö–ï–ù_–¢–ï–õ–ï–ì–†–ê–ú"
OWNER_ID = 741409144  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
USER_LOG_FILE = "user_messages.txt"
BASE_URL = "https://dota1x6.com"
# URL –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
API_UPDATES_URL = "https://stats.dota1x6.com/api/v2/updates/?page=1&count=20"

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# cloudscraper –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare
scraper = cloudscraper.create_scraper()

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
if not os.path.exists(USER_LOG_FILE):
    open(USER_LOG_FILE, "w", encoding="utf-8").close()

def log_user_message(user, text):
    try:
        with open(USER_LOG_FILE, "a", encoding="utf-8") as f:
            f.write(
                f"{datetime.now()} | ID:{getattr(user, 'id', None)} | "
                f"–ò–º—è:{getattr(user, 'first_name', None)} | "
                f"Username:@{getattr(user, 'username', None)} | {text}\n"
            )
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown V2."""
    if not isinstance(text, str):
        return ""
    
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown V2
    # _, *, [, ], (, ), ~, `, >, #, +, -, =, |, {, }, ., !
    escape_chars = r"[_*[\]()~`>#+\-=|{}.!]"
    return re.sub(escape_chars, r'\\\g<0>', text)


# ---------- Conversation states ----------
WAITING_FOR_DOTA_ID = 1

# ---------- API ----------
def get_latest_update_info_from_api():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        r = requests.get(API_UPDATES_URL, timeout=10)
        r.raise_for_status()
        
        data = r.json().get("data")
        if not data:
            logger.warning("API returned no data key")
            return None

        updates_list = data.get("values")
        
        if not updates_list or not isinstance(updates_list, list) or len(updates_list) == 0:
            logger.warning("API returned empty updates list")
            return None
            
        return updates_list[0]
            
    except requests.exceptions.HTTPError as e:
        logger.error(f"API request failed with status code {e.response.status_code}")
        return None
    except Exception:
        logger.exception("Error fetching or parsing latest update from API")
        return None

# ---------- Handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    log_user_message(user, "/start")
    keyboard = [["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

async def handle_updates_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    log_user_message(user, "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    await update.message.reply_text("üîé –ò—â—É –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")

    latest_update_info = get_latest_update_info_from_api()

    if not latest_update_info:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö —Å API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    update_url_slug = latest_update_info.get("url")
    if not update_url_slug:
        await update.message.reply_text("–í –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    update_url = urljoin(BASE_URL, f"/updates/{update_url_slug}")

    api_update_url = f"https://stats.dota1x6.com/api/v2/updates/{update_url_slug}"
    
    try:
        response = requests.get(api_update_url, timeout=10)
        response.raise_for_status()
        api_data = response.json()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
        title = api_data.get("data", {}).get("ruName", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        text_content = ""
        heroes = api_data.get("data", {}).get("heroes", [])
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —ç–º–æ–¥–∑–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        EMOJI_MAP = {
            "rare_talent": "üü¶",
            "epic_talent": "üü™",
            "innate_talent": "üî•",
            "legendary_talent": "üüß",
            "scepter": "üîÆ",
            "shard": "üî∑",
        }
        
        for hero in heroes:
            hero_name = hero.get("userFrendlyName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–µ—Ä–æ–π")
            text_content += f"\n*{escape_markdown('–ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è ')}{escape_markdown(hero_name)}*:\n"
            
            upgrades = hero.get("upgrades", [])
            if upgrades:
                for upgrade in upgrades:
                    item_type = upgrade.get("itemType")
                    emoji = ""
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è Scepter –∏ Shard
                    if item_type == "scepter":
                        emoji = EMOJI_MAP.get("scepter", "")
                    elif item_type == "shard":
                        emoji = EMOJI_MAP.get("shard", "")
                    
                    ru_rows = upgrade.get("ruRows")
                    if ru_rows:
                        text_content += f"{emoji} {escape_markdown(ru_rows.strip())} {emoji}\n"
            
            talents = hero.get("talents", [])
            if talents:
                for talent in talents:
                    name = talent.get("name", "")
                    emoji = ""
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–∞–ª–∞–Ω—Ç–∞
                    if name == "rare_talent":
                        emoji = EMOJI_MAP.get("rare_talent", "")
                    elif name == "epic_talent":
                        emoji = EMOJI_MAP.get("epic_talent", "")
                    elif name == "innate_talent":
                        emoji = EMOJI_MAP.get("innate_talent", "")
                    elif name == "legendary_talent":
                        emoji = EMOJI_MAP.get("legendary_talent", "")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ —Ç–∞–ª–∞–Ω—Ç–æ–≤
                    has_talents = any(talent.get(c) for c in ["orangeRuRows", "purpleRuRows", "blueRuRows", "abilityRuRows"])
                    if not has_talents:
                        continue

                    # –ï—Å–ª–∏ –∏–º—è —Ç–∞–ª–∞–Ω—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–¥–Ω–∏–º –∏–∑ —Ç–∏–ø–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    if name in ["rare_talent", "epic_talent", "innate_talent", "legendary_talent"]:
                        text_content += f"\n{emoji} {escape_markdown(name.capitalize())} {emoji}\n"
                    else:
                        text_content += f"\n*{escape_markdown(name.capitalize())}*:\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                    for color in ["orangeRuRows", "purpleRuRows", "blueRuRows", "abilityRuRows"]:
                        ru_rows = talent.get(color)
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–∞–ª–∞–Ω—Ç–∞
                        talent_emoji = ""
                        if color == "orangeRuRows":
                            talent_emoji = EMOJI_MAP.get("legendary_talent", "")
                        elif color == "purpleRuRows":
                            talent_emoji = EMOJI_MAP.get("epic_talent", "")
                        elif color == "blueRuRows":
                            talent_emoji = EMOJI_MAP.get("rare_talent", "")
                            
                        if ru_rows:
                            formatted_rows = ru_rows.replace("\r\n", "\n").strip()
                            text_content += f" {talent_emoji} \- {escape_markdown(formatted_rows)}\n"
        
        text_to_send = f"*{escape_markdown(title)}*\n\n{text_content}"
        if len(text_to_send) > 4096:
            text_to_send = text_to_send[:4000] + "\n\n_(—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)_"
        
        await update.message.reply_text(text_to_send, parse_mode='MarkdownV2')

        kb = [[
            InlineKeyboardButton("–ò—Å—Ç–æ—á–Ω–∏–∫", url=update_url),
            InlineKeyboardButton("–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", url=urljoin(BASE_URL, "/updates"))
        ]]
        await update.message.reply_text("–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ:", reply_markup=InlineKeyboardMarkup(kb))

    except requests.exceptions.HTTPError as e:
        logger.error(f"HTTP Error: {e.response.status_code} on {e.request.url}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    except Exception as e:
        logger.exception("Error fetching update from API")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def check_stats_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    log_user_message(user, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (start)")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Dota ID:")
    return WAITING_FOR_DOTA_ID

async def check_stats_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.strip()
    log_user_message(user, text)

    if not text.isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π Dota ID. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
        return ConversationHandler.END

    dota_id = text
    url = f"https://stats.dota1x6.com/api/v2/players/?playerId={dota_id}"
    try:
        r = requests.get(url, timeout=10)
        if r.status_code != 200:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return ConversationHandler.END
        
        data = r.json().get("data")
        if not data:
            await update.message.reply_text("–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END

        msg = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ID: {dota_id}\n\n"
            f"–í—Å–µ–≥–æ –∏–≥—Ä: {data.get('matchCount', '–Ω/–¥')}\n"
            f"–°—Ä–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ: {round(data.get('avgPlace', 0), 2)}\n"
            f"üèÜ –ü–µ—Ä–≤—ã—Ö –º–µ—Å—Ç: {data.get('firstPlaces', '–Ω/–¥')}\n"
            f"–†–µ–π—Ç–∏–Ω–≥: {data.get('rating', '–Ω/–¥')}"
        )
        await update.message.reply_text(msg)

        player_url = f"https://dota1x6.com/players/{dota_id}"
        inline = [[InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–≥—Ä", web_app=WebAppInfo(url=player_url))]]
        await update.message.reply_text("–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π:", reply_markup=InlineKeyboardMarkup(inline))

    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    log_user_message(user, "/cancel")
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def getlog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != OWNER_ID:
        return
    log_user_message(user, "/getlog")
    if not os.path.exists(USER_LOG_FILE):
        await update.message.reply_text("–§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç.")
        return
    await update.message.reply_document(document=open(USER_LOG_FILE, 'rb'), filename="user_messages.txt")

async def previewlog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != OWNER_ID:
        return
    log_user_message(user, "/previewlog")
    try:
        with open(USER_LOG_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()
        last_lines = "".join(lines[-50:]) if lines else "(–ø—É—Å—Ç–æ)"
        if len(last_lines) > 4000:
            last_lines = "..." + last_lines[-4000:]
        await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞:\n\n```\n{last_lines}\n```", parse_mode='MarkdownV2')
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥.")

async def unknown_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

def main():
    if TOKEN == "–í–ê–®_–¢–û–ö–ï–ù_–¢–ï–õ–ï–ì–†–ê–ú":
        logger.critical("!!! TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–º–µ–Ω–∏—Ç–µ '–í–ê–®_–¢–û–ö–ï–ù_–¢–ï–õ–ï–ì–†–ê–ú' –≤ –∫–æ–¥–µ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É$"), check_stats_start)],
        states={WAITING_FOR_DOTA_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_stats_id)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("getlog", getlog))
    app.add_handler(CommandHandler("previewlog", previewlog))
    app.add_handler(conv)
    app.add_handler(MessageHandler(filters.Regex("^–û–±–Ω–æ–≤–ª–µ–Ω–∏—è$"), handle_updates_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_text))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
