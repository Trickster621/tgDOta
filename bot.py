import logging
import requests
from datetime import datetime
from io import BytesIO
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from bs4 import BeautifulSoup
import os

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.environ.get("BOT_TOKEN") or "–í–ê–®_–¢–û–ö–ï–ù"

# Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
OWNER_ID = 741409144

# –ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É
USER_LOG_FILE = "user_messages.txt"
if not os.path.exists(USER_LOG_FILE):
    open(USER_LOG_FILE, "w", encoding="utf-8").close()

def log_user_message(user, text):
    with open(USER_LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"{datetime.now()} | ID: {user.id} | –ò–º—è: {user.first_name} | –°–æ–æ–±—â–µ–Ω–∏–µ: {text}\n")

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_user_message(user, "/start")
    reply_keyboard = [["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"], ["–û–±–Ω–æ–≤–ª–µ–Ω–∏—è"]]
    await update.message.reply_text(
        text="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    )

# –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def get_latest_update():
    url = "https://dota1x6.com/updates"
    resp = requests.get(url)
    if resp.status_code != 200:
        return None

    soup = BeautifulSoup(resp.text, "html.parser")
    # –ò—â–µ–º –≤—Å–µ td —Å bg-dark
    update_cells = soup.find_all("td", class_=lambda x: x and "bg-dark" in x)
    if not update_cells:
        return None

    latest_text = update_cells[0].get_text(strip=True)

    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
    # üîπ ‚Äî shrad, üî• ‚Äî innate, üîÆ ‚Äî ultimate
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∏ –∏—Å–∫–∞—Ç—å img –≤ td
    return latest_text

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    text = update.message.text.strip()
    log_user_message(user, text)

    if text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Dota ID:")
        return

    if text == "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è":
        latest_update = get_latest_update()
        if not latest_update:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
            return
        inline_keyboard = [
            [InlineKeyboardButton("–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", url="https://dota1x6.com/updates")]
        ]
        await update.message.reply_text(
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n\n{latest_update}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard)
        )
        return

    if not text.isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π Dota ID.")
        return

    dota_id = text
    url = f"https://stats.dota1x6.com/api/v2/players/?playerId={dota_id}"
    try:
        response = requests.get(url)
        if response.status_code != 200:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API.")
            return

        data = response.json().get("data")
        if not data:
            await update.message.reply_text("–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        match_count = data.get("matchCount", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        avg_place = round(data.get("avgPlace", 0), 2)
        first_places = data.get("firstPlaces", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        rating = data.get("rating", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        msg = (
            f"–í—Å–µ–≥–æ –∏–≥—Ä: {match_count}\n"
            f"–°—Ä–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ: {avg_place}\n"
            f"–ü–µ—Ä–≤—ã—Ö –º–µ—Å—Ç: {first_places}\n"
            f"–†–µ–π—Ç–∏–Ω–≥: {rating}"
        )
        await update.message.reply_text(msg)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID {text}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

# /getlog
async def getlog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_user_message(user, "/getlog")
    if user.id != OWNER_ID:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    with open(USER_LOG_FILE, "r", encoding="utf-8") as f:
        bio = BytesIO(f.read().encode("utf-8"))
    bio.seek(0)
    await update.message.reply_document(document=bio, filename="user_messages.txt")

# /previewlog
async def previewlog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_user_message(user, "/previewlog")
    if user.id != OWNER_ID:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    with open(USER_LOG_FILE, "r", encoding="utf-8") as f:
        lines = f.readlines()
    last_lines = "".join(lines[-50:]) if lines else "(–ø—É—Å—Ç–æ)"
    if len(last_lines) > 3500:
        last_lines = last_lines[-3500:]
    await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞:\n\n{last_lines}")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("getlog", getlog))
    app.add_handler(CommandHandler("previewlog", previewlog))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
