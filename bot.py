import logging
import requests
from bs4 import BeautifulSoup
from datetime import datetime
from io import BytesIO
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import os

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")

# –ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É
USER_LOG_FILE = "/app/user_messages.txt"
OWNER_ID = 741409144

# –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –∑–∞—Ä–∞–Ω–µ–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(USER_LOG_FILE):
    open(USER_LOG_FILE, "w", encoding="utf-8").close()

def log_user_message(user, text):
    with open(USER_LOG_FILE, "a", encoding="utf-8") as f:
        f.write(
            f"{datetime.now()} | ID: {user.id} | "
            f"–ò–º—è: {user.first_name} | –§–∞–º–∏–ª–∏—è: {user.last_name} | "
            f"Username: @{user.username} | –°–æ–æ–±—â–µ–Ω–∏–µ: {text}\n"
        )

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_user_message(user, "/start")

    reply_keyboard = [["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è"]]
    await update.message.reply_text(
        text="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    )

# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def get_latest_update_text():
    base_url = "https://dota1x6.com"
    updates_url = f"{base_url}/updates"

    response = requests.get(updates_url)
    if response.status_code != 200:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."

    soup = BeautifulSoup(response.text, "html.parser")

    latest_update_link = soup.find("a", class_="update-item")  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å —Å—Å—ã–ª–∫–∏
    if not latest_update_link or not latest_update_link.get("href"):
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."

    latest_url = base_url + latest_update_link.get("href")
    resp_update = requests.get(latest_url)
    if resp_update.status_code != 200:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."

    update_soup = BeautifulSoup(resp_update.text, "html.parser")
    update_block = update_soup.find("div", class_="update-content")  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—Å—Ç–∞
    if not update_block:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."

    lines = []
    for element in update_block.find_all(recursive=False):
        text = element.get_text(strip=True)

        # –°–º–∞–π–ª–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º
        imgs = element.find_all("img")
        for img in imgs:
            src = img.get("src", "")
            if "aghanims_shard.png" in src:
                text = f"üîπ {text}"
            elif "innate.png" in src:
                text = f"üî• {text}"
            elif "ultimate_scepter.png" in src:
                text = f"üîÆ {text}"

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        if "–£—Å–∏–ª–µ–Ω–∏–µ" in text:
            text = f"üü¢ {text} üü¢"
        elif "–û—Å–ª–∞–±–ª–µ–Ω–∏–µ" in text:
            text = f"üõë {text} üõë"
        elif "–≠–ø–∏—á–µ—Å–∫–∏–π —Ç–∞–ª–∞–Ω—Ç" in text:
            text = f"üü™ {text}"
        elif "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ç–∞–ª–∞–Ω—Ç" in text:
            text = f"üüß {text}"
        elif "–†–µ–¥–∫–∏–π —Ç–∞–ª–∞–Ω—Ç" in text:
            text = f"üü¶ {text}"

        lines.append(text)

    return "\n".join(lines)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    text = update.message.text.strip()
    
    log_user_message(user, text)

    if text == "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è":
        update_text = get_latest_update_text()
        inline_keyboard = [
            [InlineKeyboardButton(
                "–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                web_app=WebAppInfo(url="https://dota1x6.com/updates")
            )]
        ]
        await update.message.reply_text(
            update_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard)
        )
        return

    # –û—Å—Ç–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")

# /getlog
async def getlog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_user_message(user, "/getlog")

    if user.id != OWNER_ID:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    if not os.path.exists(USER_LOG_FILE):
        await update.message.reply_text("–§–∞–π–ª –ª–æ–≥–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return

    try:
        with open(USER_LOG_FILE, "r", encoding="utf-8") as f:
            content = f.read()
        bio = BytesIO()
        bio.write(content.encode("utf-8"))
        bio.seek(0)
        await update.message.reply_document(document=bio, filename="user_messages.txt")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥-—Ñ–∞–π–ª.")

# /previewlog
async def previewlog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_user_message(user, "/previewlog")

    if user.id != OWNER_ID:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    if not os.path.exists(USER_LOG_FILE):
        await update.message.reply_text("–§–∞–π–ª –ª–æ–≥–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return

    try:
        with open(USER_LOG_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()
        last_lines = "".join(lines[-50:]) if lines else "(–ø—É—Å—Ç–æ)"
        if len(last_lines) > 3500:
            last_lines = last_lines[-3500:]
        await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞:\n\n{last_lines}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ previewlog: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("getlog", getlog))
    app.add_handler(CommandHandler("previewlog", previewlog))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        app.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    main()
