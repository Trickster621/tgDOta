import logging
import requests
from datetime import datetime
from io import BytesIO
from bs4 import BeautifulSoup
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import os
import asyncio
import subprocess
import sys
from playwright.async_api import async_playwright

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ ---
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –±–µ–∑ —Ç–æ–∫–µ–Ω–∞

OWNER_ID = 741409144 # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
USER_LOG_FILE = "user_messages.txt"
if not os.path.exists(USER_LOG_FILE):
    try:
        with open(USER_LOG_FILE, "w", encoding="utf-8") as f:
            pass # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –ª–æ–≥–æ–≤: {USER_LOG_FILE}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤ {USER_LOG_FILE}: {e}")

def log_user_message(user, text):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
    try:
        with open(USER_LOG_FILE, "a", encoding="utf-8") as f:
            f.write(
                f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | "
                f"ID: {user.id} | –ò–º—è: {user.first_name} | "
                f"–§–∞–º–∏–ª–∏—è: {user.last_name or 'N/A'} | "
                f"Username: @{user.username or 'N/A'} | –°–æ–æ–±—â–µ–Ω–∏–µ: {text}\n"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª: {e}")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Playwright ---
async def install_playwright_browsers():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä—ã –¥–ª—è Playwright.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤ Playwright...")
    try:
        cmd = [sys.executable, "-m", "playwright", "install", "chromium", "--with-deps"]
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º subprocess.run –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=600 # 10 –º–∏–Ω—É—Ç
        )
        
        if result.returncode == 0:
            logger.info("Playwright Chromium —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–ª–∏ —É–∂–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            if result.stdout:
                logger.debug(f"Playwright install stdout: {result.stdout}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Playwright. –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
            if result.stderr:
                logger.error(f"Playwright install stderr: {result.stderr}")
    except subprocess.TimeoutExpired:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤ Playwright.")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤ Playwright: {e}", exc_info=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    log_user_message(user, "/start")
    reply_keyboard = [["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è"]]
    await update.message.reply_text(
        text="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    text = update.message.text.strip()
    log_user_message(user, text)

    if text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Dota ID:")
        return

    if text == "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è":
        await send_last_update(update)
        return

    if not text.isdigit():
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Dota ID
    dota_id = text
    url = f"https://stats.dota1x6.com/api/v2/players/?playerId={dota_id}"
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è ID {dota_id}")
    
    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        
        data = response.json().get("data")
        if not data:
            await update.message.reply_text("–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        match_count = data.get("matchCount", "N/A")
        avg_place = round(data.get("avgPlace", 0), 2)
        first_places = data.get("firstPlaces", "N/A")
        rating = data.get("rating", "N/A")

        msg = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {dota_id}*:\n"
            f"–í—Å–µ–≥–æ –∏–≥—Ä: {match_count}\n"
            f"–°—Ä–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ: {avg_place}\n"
            f"–ü–µ—Ä–≤—ã—Ö –º–µ—Å—Ç: {first_places}\n"
            f"–†–µ–π—Ç–∏–Ω–≥: {rating}"
        )
        await update.message.reply_text(msg, parse_mode='Markdown')

        # –ö–Ω–æ–ø–∫–∞ Mini App
        player_url = f"https://dota1x6.com/players/{dota_id}"
        inline_keyboard = [
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä", web_app=WebAppInfo(url=player_url))]
        ]
        await update.message.reply_text(
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard)
        )

    except requests.exceptions.Timeout:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¥–ª—è ID {dota_id}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API.")
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¥–ª—è ID {dota_id}: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API.")
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç API –¥–ª—è ID {dota_id}: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API.")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID {dota_id}: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def send_last_update(update: Update):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ dota1x6.com/updates"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    status_message = await update.message.reply_text("üîç –ò—â—É –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")

    try:
        url = "https://dota1x6.com/updates"
        
        # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ---
        logger.info(f"–ó–∞–ø—É—Å–∫ Playwright –¥–ª—è {url}")
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=True)
            logger.debug("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
            
            page = await browser.new_page()
            logger.debug(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {url}")
            
            await page.goto(url, wait_until='networkidle', timeout=30000)
            logger.debug("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∂–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JS...")
            await page.wait_for_timeout(5000)
            
            html_content = await page.content()
            logger.debug(f"HTML –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤.")
            await browser.close()

        # --- –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ---
        logger.debug("–ü–∞—Ä—Å–∏–Ω–≥ HTML —Å–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        soup = BeautifulSoup(html_content, "html.parser")

        if "You need to enable JavaScript" in html_content:
            logger.warning("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—Å—ë –µ—â—ë –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É JavaScript.")
        
        # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∏ –∏–º–µ—é—Ç –≤–∏–¥ /updates/some-title
        update_links = soup.find_all("a", href=lambda href: href and href.startswith("/updates/") and href != "/updates/")
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(update_links)} —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        
        if not update_links:
            update_links = soup.find_all("a", href=lambda href: href and "updates" in href and href not in ["/updates", "/updates/"])
            logger.debug(f"–ü–ª–∞–Ω –ë: –Ω–∞–π–¥–µ–Ω–æ {len(update_links)} —Å—Å—ã–ª–æ–∫.")

        if not update_links:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")
            preview_html = html_content[:1000] if len(html_content) > 1000 else html_content
            await status_message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. "
                "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞ –º–æ–≥–ª–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è. "
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            if update.effective_user.id == OWNER_ID:
                await update.message.reply_text(
                    f"–î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ HTML:\n```\n{preview_html}\n```",
                    parse_mode='MarkdownV2'
                )
            return

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É
        latest_update_link = update_links[0]['href']
        full_update_url = f"https://dota1x6.com{latest_update_link}" if latest_update_link.startswith('/') else latest_update_link
        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {full_update_url}")

        # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
        logger.info(f"–ó–∞–ø—É—Å–∫ Playwright –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {full_update_url}")
        async with async_playwright() as p:
            browser_detail = await p.chromium.launch(headless=True)
            page_detail = await browser_detail.new_page()
            logger.debug(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {full_update_url}")
            
            await page_detail.goto(full_update_url, wait_until='networkidle', timeout=30000)
            logger.debug("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∂–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JS...")
            await page_detail.wait_for_timeout(5000)
            
            detail_html_content = await page_detail.content()
            logger.debug(f"HTML –¥–µ—Ç–∞–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(detail_html_content)} —Å–∏–º–≤–æ–ª–æ–≤.")
            await browser_detail.close()

        # --- –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
        logger.debug("–ü–∞—Ä—Å–∏–Ω–≥ HTML –¥–µ—Ç–∞–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        detail_soup = BeautifulSoup(detail_html_content, "html.parser")
        
        if "You need to enable JavaScript" in detail_html_content:
            logger.warning("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å—ë –µ—â—ë –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É JavaScript.")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        title_tag = detail_soup.find('title')
        if title_tag:
            title = title_tag.get_text(strip=True).replace(" - Dota 1x6", "")
        else:
            header_tag = detail_soup.find(['h1', 'h2'])
            if header_tag:
                title = header_tag.get_text(strip=True)
        
        logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {title}")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        content_div = None
        potential_content_selectors = [
            "article",
            "div.content",
            "div.post-content",
            "div.entry-content",
            "main",
        ]
        for selector in potential_content_selectors:
            content_div = detail_soup.select_one(selector)
            if content_div:
                logger.debug(f"–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                break
        
        if not content_div:
            content_div = detail_soup.body if detail_soup.body else detail_soup
            logger.warning("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é body.")

        content_text = content_div.get_text(separator='\n', strip=True) if content_div else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞."
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        max_length = 3500
        if len(content_text) > max_length:
            content_text = content_text[:max_length] + "\n...\n(–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Ç–µ–∫—Å—Ç–∞
        message_text = f"üÜï *{title}*\n\n{content_text}"
        if len(message_text) > 4096:
            message_text = message_text[:4090] + "..."
        
        await status_message.edit_text("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        try:
            await update.message.reply_text(message_text, parse_mode='Markdown')
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            await update.message.reply_text(f"üÜï {title}\n\n{content_text}"[:4096])

        # --- –ü–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
        images = content_div.find_all("img") if content_div else []
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        
        sent_images = 0
        max_images = 5
        for img in images:
            if sent_images >= max_images:
                await update.message.reply_text(f"(–ï—Å—Ç—å –µ—â—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ {max_images} —à—Ç.)")
                break

            img_src = img.get("src") or img.get("data-src") or img.get("data-lazy-src")
            if not img_src:
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
            if img_src.startswith(("http://", "https://")):
                img_url = img_src
            elif img_src.startswith('/'):
                img_url = f"https://dota1x6.com{img_src}"
            else:
                img_url = f"https://dota1x6.com/{img_src}"
            
            logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_url}")
            try:
                img_resp = requests.get(img_url, timeout=20)
                if img_resp.status_code == 200 and img_resp.content:
                    await update.message.reply_photo(photo=BytesIO(img_resp.content))
                    sent_images += 1
                    logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {img_url}")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img_url}, —Å—Ç–∞—Ç—É—Å: {img_resp.status_code}")
            except requests.exceptions.RequestException as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_url}: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_url}: {e}", exc_info=True)

        if sent_images == 0 and images:
            await update.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Ö –∑–∞–≥—Ä—É–∑–∏—Ç—å.")

        # –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        inline_keyboard = [[InlineKeyboardButton("–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", url="https://dota1x6.com/updates")]]
        await update.message.reply_text(
            "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard)
        )

    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Playwright.")
        await status_message.edit_text("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}", exc_info=True)
        await status_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")
        if update.effective_user.id == OWNER_ID:
            await update.message.reply_text(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n`{str(e)[:500]}`", parse_mode='MarkdownV2')

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---

async def getlog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    user = update.effective_user
    log_user_message(user, "/getlog")

    if user.id != OWNER_ID:
        await update.message.reply_text("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    if not os.path.exists(USER_LOG_FILE) or os.path.getsize(USER_LOG_FILE) == 0:
        await update.message.reply_text("üì≠ –§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –¥–≤–æ–∏—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        with open(USER_LOG_FILE, "rb") as f:
            await update.message.reply_document(document=f, filename="user_messages.txt")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤.")

async def previewlog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    user = update.effective_user
    log_user_message(user, "/previewlog")

    if user.id != OWNER_ID:
        await update.message.reply_text("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        with open(USER_LOG_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()
        
        if not lines:
             await update.message.reply_text("üì≠ –õ–æ–≥ –ø—É—Å—Ç.")
             return
             
        last_lines = "".join(lines[-50:]) if lines else "(–ø—É—Å—Ç–æ)"
        if len(last_lines) > 3500:
            last_lines = last_lines[-3500:]
            
        await update.message.reply_text(
            f"```\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞:\n\n{last_lines}\n```",
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–æ–≥–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–∞.")

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---

async def main():
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    logger.info("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞...")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤ Playwright
    await install_playwright_browsers()
    
    if not TOKEN:
        logger.critical("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
        
    app = ApplicationBuilder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("getlog", getlog))
    app.add_handler(CommandHandler("previewlog", previewlog))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
    await app.run_polling()

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run() –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è python-telegram-bot v20+
    # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ "already running", —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å—Ä–µ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Jupyter)
    # –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ, –∑–∞–ø—É—Å–∫ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π `python bot.py` –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
    asyncio.run(main())
